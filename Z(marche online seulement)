
   SOIENT
       R : ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       R2 : ARB DE ( ENTIER , ENTIER , CAR ) ;
       T UN TABLEAU ( 10 ) DE ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       Rech_nom , Rech_age , Rech_prenom , Inser , Inser_glob , Parcour_inordre , Creation_pays : ACTION ;
       Creation_pays_saff , Arb_global , Parcour_inordre_glb : ACTION ;
       Gen_chaine : FONCTION ( CHAINE ) ;
       Gen_result : FONCTION ( CAR ) ;
       Nb_occur , Pourcentage : FONCTION ( ENTIER ) ;
       I , J UN ENTIER ;
       A : CAR ;
      
   DEBUT
       APPEL Creation_pays ( T ) ;
      
   FIN
  /**************************************************************************/
   ACTION Rech_nom ( R , Nom , Age , Pr , P )
   SOIENT
       Trouve UN BOOLEEN ;
       R , Pr , P , K : ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       Age UN ENTIER ;
       Nom UNE CHAINE ;
      
   DEBUT
       Trouve := FAUX ;
       Pr := NIL ;
       TQ ( R # NIL ) ET ( NON Trouve ) :
           SI STRUCT ( INFO ( R ) , 1 ) = Nom :
               Trouve := VRAI ;
              
           SINON
               Pr := R ;
               SI Age > STRUCT ( INFO ( R ) , 3 ) :
                   R := FD ( R ) ;
                  
               SINON
                   R := FG ( R ) ;
                  
               FINSI ;
              
           FINSI ;
          
       FTQ ;
       P := R ;
      
   FIN
  /****************************************************************************/
   ACTION Rech_prenom ( R , Prenom , Age , Pr , P )
   SOIENT
       Trouve UN BOOLEEN ;
       R , Pr , P , K : ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       Age UN ENTIER ;
       Prenom UNE CHAINE ;
      
   DEBUT
       Trouve := FAUX ;
       Pr := NIL ;
       TQ ( R # NIL ) ET ( NON Trouve ) :
           SI STRUCT ( INFO ( R ) , 2 ) = Prenom :
               Trouve := VRAI ;
              
           SINON
               Pr := R ;
               SI Age > STRUCT ( INFO ( R ) , 3 ) :
                   R := FD ( R ) ;
                  
               SINON
                   R := FG ( R ) ;
                  
               FINSI ;
              
           FINSI ;
          
       FTQ ;
       P := R ;
      
   FIN
  /**************************************************************************/
   ACTION Inser ( R )
   SOIENT
       R , Q , Pr , P , K , S : ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       Age UN ENTIER ;
       Nom , Prenom : CHAINES ;
       Resultat : CAR ;
       U : STRUCTURES ( CHAINE , CHAINE , ENTIER , CAR ) ;
      
   DEBUT
       Nom := Gen_chaine ( 3 , 10 ) ;
       Prenom := Gen_chaine ( 3 , 10 ) ;
       Age := 18 ;
       Resultat := Gen_result ( Resultat ) ;
       S := R ;
       SI S = NIL :
           CREERNOEUD ( S ) ;
           AFF_STRUCT ( U , 1 , Nom ) ;
           AFF_STRUCT ( U , 2 , Prenom ) ;
           AFF_STRUCT ( U , 3 , Age ) ;
           AFF_STRUCT ( U , 4 , Resultat ) ;
           AFF_INFO ( S , U ) ;
           R := S ;
          
       SINON
           APPEL Rech_nom ( S , Nom , Age , Pr , P ) ;
           S := R ;
           APPEL Rech_prenom ( S , Prenom , Age , Pr , K ) ;
           SI ( P = NIL ) ET ( K = NIL ) :
               CREERNOEUD ( Q ) ;
               AFF_STRUCT ( U , 1 , Nom ) ;
               AFF_STRUCT ( U , 2 , Prenom ) ;
               AFF_STRUCT ( U , 3 , Age ) ;
               AFF_STRUCT ( U , 4 , Resultat ) ;
               AFF_INFO ( Q , U ) ;
               AFF_FG ( Q , NIL ) ;
               AFF_FD ( Q , NIL ) ;
               SI Age > STRUCT ( INFO ( Pr ) , 3 ) :
                   AFF_FD ( Pr , Q ) ;
                  
               SINON
                   AFF_FG ( Pr , Q ) ;
                  
               FINSI ;
              
           FINSI ;
           S := Pr ;
          
       FINSI ;
      
   FIN
  /*****************************************************************************/
   ACTION Parcour_inordre ( R )
   SOIENT
       R , P : POINTEUR VERS ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
      
   DEBUT
       SI R <> NIL :
           APPEL Parcour_inordre ( FG ( R ) ) ;
           ECRIRE ( 'Nom= ' , STRUCT ( INFO ( R ) , 1 ) ) ;
           ECRIRE ( 'prenom= ' , STRUCT ( INFO ( R ) , 2 ) ) ;
           ECRIRE ( 'Age= ' , STRUCT ( INFO ( R ) , 3 ) ) ;
           ECRIRE ( 'Resultat= ' , STRUCT ( INFO ( R ) , 4 ) ) ;
           ECRIRE ( '-----------------' ) ;
           APPEL Parcour_inordre ( FD ( R ) ) ;
          
       FINSI ;
      
   FIN
  /*****************************************************************************/
   FONCTION Gen_chaine ( Inf , Sup ) : CHAINE ;
   SOIENT
       Inf , Sup , I : ENTIER ;
       Ch : CHAINE ;
      
   DEBUT
       I := ALEANOMBRE ( Sup ) + 1 ;
       Ch := ALEACHAINE ( I ) ;
       TQ LONGCHAINE ( Ch ) < Inf :
           I := ALEANOMBRE ( Sup ) + 1 ;
           Ch := ALEACHAINE ( I ) ;
          
       FTQ ;
       Gen_chaine := Ch ;
      
   FIN
  /**************************************************************************/
   FONCTION Gen_result ( C ) : CAR ;
   SOIENT
       C : CAR ;
      
   DEBUT
       SI ALEANOMBRE ( 2 ) = 1 :
           Gen_result := 'R' ;
          
       SINON
           Gen_result := 'D' ;
          
       FSI ;
      
   FIN
  /************************************************************************/
   ACTION Creation_pays ( T )
   SOIENT
       T UN TABLEAU ( 10 ) DE ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       I , J : ENTIERS ;
      
   DEBUT
       R := NIL ;
       POUR J := 1 , 10 :
           POUR I := 1 , ALEANOMBRE ( 20 ) + 1 :
               APPEL Inser ( R ) ;
              
           FINPOUR ;
           AFF_ELEMENT ( T [ J ] , R ) ;
           ECRIRE ( '//*****************Pays******************//' , J ) ;
           APPEL Parcour_inordre ( R ) ;
           R := NIL
       FINPOUR ;
      
   FIN
  /*************************************************************************/
  /*DEUXIEME PARTIE*/
  /*************************************************************************/
   ACTION Inser_glob ( R2 , Age , Nb_occ , Resultat )
   SOIENT
       Q , Pr , R2 , S : ARB DE ( ENTIER , ENTIER , CAR ) ;
       Age , Nb_occ : ENTIERS ;
       Resultat : CAR ;
       U DES STRUCTURES ( ENTIER , ENTIER , CAR ) ;
      
   DEBUT
       S := R2 ;
       SI S = NIL :
           CREERNOEUD ( S ) ;
           AFF_STRUCT ( U , 1 , Age ) ;
           AFF_STRUCT ( U , 2 , Nb_occ ) ;
           AFF_STRUCT ( U , 3 , Resultat ) ;
           AFF_INFO ( S , U ) ;
           R2 := S ;
          
       SINON
           APPEL Rech_age ( S , Age , Pr ) ;
           CREERNOEUD ( Q ) ;
           AFF_STRUCT ( U , 1 , Age ) ;
           AFF_STRUCT ( U , 2 , Nb_occ ) ;
           AFF_STRUCT ( U , 3 , Resultat ) ;
           AFF_INFO ( Q , U ) ;
           AFF_FG ( Q , NIL ) ;
           AFF_FD ( Q , NIL ) ;
           SI Age > STRUCT ( INFO ( Pr ) , 1 ) :
               AFF_FD ( Pr , Q ) ;
              
           SINON
               SI Age < STRUCT ( INFO ( Pr ) , 1 ) :
                   AFF_FG ( Pr , Q ) ;
                  
               SINON
                   SI ( Age = STRUCT ( INFO ( Pr ) , 1 ) ) ET ( Resultat = 'D' ) :
                       AFF_FG ( Pr , Q ) ;
                      
                   SINON
                       AFF_FD ( Pr , Q ) ;
                      
                   FINSI ;
                  
               FINSI ;
              
           FINSI ;
           S := Pr ;
          
       FINSI ;
      
   FIN
  /***********************************************************************/
   ACTION Rech_age ( R2 , Age , Pr )
   SOIENT
       Trouve UN BOOLEEN ;
       R2 , Pr , K : ARB DE ( ENTIER , ENTIER , CAR ) ;
       Age UN ENTIER ;
      
   DEBUT
       Trouve := FAUX ;
       Pr := NIL ;
       TQ ( R2 # NIL ) ET ( NON Trouve ) :
           SI STRUCT ( INFO ( R2 ) , 1 ) = Age :
               Trouve := VRAI ;
               Pr := R2 ;
              
           SINON
               Pr := R2 ;
               SI Age > STRUCT ( INFO ( R2 ) , 1 ) :
                   R2 := FD ( R2 ) ;
                  
               SINON
                   R2 := FG ( R2 ) ;
                  
               FINSI ;
              
           FINSI ;
          
       FTQ ;
      
   FIN
  /********************************************************************/
   FONCTION Nb_occur ( T , Age , Resultat ) : ENTIER ;
   SOIENT
       Pil UNE PILE DE ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       P , R : ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       T UN TABLEAU ( 10 ) DE ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       Fini UN BOOLEEN ;
       Age , Cpt , J : ENTIER ;
       Resultat : CAR ;
      
   DEBUT
       Cpt := 0 ;
       POUR J := 1 , 10 :
           Fini := FAUX ;
           R := ELEMENT ( T [ J ] ) ;
           TQ NON Fini :
               TQ R <> NIL :
                   EMPILER ( Pil , R ) ;
                   R := FG ( R ) ;
                  
               FTQ ;
               SI NON PILEVIDE ( Pil ) :
                   DEPILER ( Pil , R ) ;
                   SI ( STRUCT ( INFO ( R ) , 3 ) = Age ) ET ( STRUCT ( INFO ( R ) , 4 ) = Resultat ) :
                       Cpt := Cpt + 1 ;
                      
                   FINSI ;
                   R := FD ( R ) ;
                  
               SINON
                   Fini := VRAI ;
                  
               FINSI ;
              
           FTQ ;
          
       FINPOUR ;
       Nb_occur := Cpt ;
      
   FIN
  /******************************************************************************/
   ACTION Creation_pays_saff ( T )
   SOIENT
       T UN TABLEAU ( 10 ) DE ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       J , I UN ENTIER ;
      
   DEBUT
       POUR J := 1 , 10 :
           POUR I := 1 , ALEANOMBRE ( 20 ) + 1 :
               APPEL Inser ( R ) ;
              
           FINPOUR ;
           AFF_ELEMENT ( T [ J ] , R ) ;
           R := NIL ;
          
       FINPOUR ;
      
   FIN
  /******************************************************************************/
   ACTION Arb_global ( T , R2 )
   SOIENT
       R2 : ARB DE ( ENTIER , ENTIER , CAR ) ;
       T UN TABLEAU ( 10 ) DE ARB DE ( CHAINE , CHAINE , ENTIER , CAR ) ;
       A , B : CAR ;
       Nb : ENTIER ;
      
   DEBUT
       APPEL Creation_pays_saff ( T ) ;
       A := 'D' ;
       B := 'R' ;
       POUR I := 0 , 100 :
           Nb := Nb_occur ( T , I , A ) ;
           SI ( Nb <> 0 ) :
               APPEL Inser_glob ( R2 , I , Nb , A ) ;
              
           FINSI ;
           Nb := Nb_occur ( T , I , B ) ;
           SI ( Nb <> 0 )
               APPEL Inser_glob ( R2 , I , Nb , B ) ;
              
           FINSI ;
          
       FINPOUR ;
       APPEL Parcour_inordre_glb ( R2 ) ;
      
   FIN
  /*****************************************************************************/
   ACTION Parcour_inordre_glb ( S2 )
   SOIENT
       P , R2 , S2 : ARB DE ( ENTIER , ENTIER , CAR ) ;
      
   DEBUT
       R2 := S2 ;
       SI R <> NIL :
           APPEL Parcour_inordre ( FG ( R2 ) ) ;
           ECRIRE ( '-----------------' ) ;
           ECRIRE ( 'Age= ' , STRUCT ( INFO ( R2 ) , 1 ) ) ;
           ECRIRE ( 'Nombre de occurences= ' , STRUCT ( INFO ( R2 ) , 2 ) ) ;
           ECRIRE ( 'Resultat ' , STRUCT ( INFO ( R2 ) , 3 ) ) ;
           APPEL Parcour_inordre ( FD ( R2 ) ) ;
          
       FINSI ;
      
   FIN
  /****************************************************************************/
   FONCTION Pourcentage ( S2 , Inf , Sup , Resultat ) : ENTIER ;
   SOIENT
       Pil UNE PILE DE ARB DE ( ENTIER , ENTIER , CAR ) ;
       R2 , S2 : ARB DE ( ENTIER , ENTIER , CAR ) ;
       Inf , Sup , Nb_occ , Nb_pers : ENTIERS ;
       Resultat : CAR ;
       Fini UN BOOLEEN ;
      
   DEBUT
       R2 := S2 ;
       Nb_occ := 0 ;
       Nb_pers := 0 ;
       Fini := FAUX ;
       TQ NON Fini :
           TQ R2 <> NIL :
               EMPILER ( Pil , R2 ) ;
               R2 := FG ( R2 ) ;
              
           FTQ ;
           SI NON PILEVIDE ( Pil ) :
               DEPILER ( Pil , R2 ) ;
               Nb_occ := Nb_occ + STRUCT ( INFO ( R2 ) , 2 ) ;
               SI ( ( STRUCT ( INFO ( R2 ) , 1 ) <= Sup ) ET ( STRUCT ( INFO ( R2 ) , 1 ) >= Inf ) ) :
                   SI ( STRUCT ( INFO ( R2 ) , 3 ) = Resultat ) :
                       Nb_pers := Nb_pers + STRUCT ( INFO ( R2 ) , 2 ) ;
                      
                   FINSI ;
                  
               FINSI ;
               R2 := FD ( R2 ) ;
              
           SINON
               Fini := VRAI ;
              
           FINSI ;
          
       FTQ ;
       Pourcentage := ( ( Nb_pers * 100 ) / Nb_occ ) ;
      
   FIN
